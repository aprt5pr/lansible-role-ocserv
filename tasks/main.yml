---

- name: Gather OS-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "vars/{{ ansible_distribution }}.yml"
      skip: True

- name: Include OS-specific tasks
  include: '{{ ansible_distribution }}.yml'

- name: Include Oath tasks
  include: 'oath.yml'
  when:
    - ocserv_oath_enabled
  tags:
    - ocserv-oath

- name: Include user-related tasks
  include: user.yml
  tags:
    - ocserv-users

- name: Include group-related tasks
  include: group.yml
  tags:
    - ocserv-groups

- name: Execute plain auth tasks
  template:
    src:   ocserv_passwd.j2
    dest:  "{{ ocserv_passwd }}"
    owner: root
    group: root
    mode:  0600
  with_items:
    - "{{ ocserv_config['auth'] }}"
    - "{{ ocserv_config['enable_auth'] | default([]) }}"
  when:
    - item['name'] | lower == 'plain'

- name: Include script tasks
  include: scripts.yml

- name: Add SSL certificate file
  copy:
    content: "{{ ocserv_server_cert_content }}"
    dest:    "{{ ocserv_config['server_cert'] }}"
    owner:   root
    group:   root
    mode:    0644
  notify: restart ocserv
  when: ocserv_server_cert_content is defined

- name: Add SSL private key file
  copy:
    content: "{{ ocserv_server_key_content }}"
    dest:    "{{ ocserv_config['server_key'] }}"
    owner:   root
    group:   root
    mode:    0600
  notify: restart ocserv
  when: ocserv_server_key_content is defined

- name: Enable forwarding from tun interfaces to public interface
  sysctl:
    name:       net.ipv4.ip_forward
    value:      1
    sysctl_set: yes
    state:      present
    reload:     yes
  when: ocserv_enable_ip_forwarding

# ocserv --test-config will return failure if certs are not pre-existing
- name: Stat SSL cert file
  stat:
    path: "{{ ocserv_config['server_cert'] }}"
  register: cert_file
- name: Stat SSL key file
  stat:
    path: "{{ ocserv_config['server_key'] }}"
  register: key_file


- name: Configure Ocserv for CentOS w/ certs
  template:
    src:  ocserv.conf.j2
    dest: /etc/ocserv/ocserv.conf
    validate: ocserv --test-config --config=%s
  notify: restart ocserv
  when:
    - ansible_distribution == 'CentOS'
    - cert_file.stat.exists
    - key_file.stat.exists

# Ubuntu's Ocserv version doesn't have --test-config option
- name: Configure Ocserv
  template:
    src:  ocserv.conf.j2
    dest: /etc/ocserv/ocserv.conf
  notify: restart ocserv
  when:
    - ansible_distribution == 'Ubuntu' or
      cert_file.stat.exists == False or
      key_file.stat.exists == False

- name: Start and enable Ocserv
  service:
    name:  ocserv
    state: started
    enabled: yes
